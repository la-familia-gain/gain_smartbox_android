SmartBox android applikáció fejlesztés 
java alapokon
Előzmények
Az előző félévben egy hordozható „okosdobozt” készítettünk, demonstrációs céllal középiskolásoknak. Ebben a dobozban mikroszámítógépek és szenzorok kaptak helyet. A szenzorokból adatokat nyerünk ki a mikroszámítógépek segítségével, melyeket lokálisan tárolunk és megjelenítjük azokat egy ehhez kialakított webes felületen. 
Jelenlegi állapot
A dobozban három darab Raspberry Pi model B (mikroszámítógép) kapott helyet. Az egyikre csatlakoznak a szenzorok (továbbiakban pi1), a második egy adatbázis szerverként funkcionál (továbbiakban pi2) amin a szenzorok adatait tároljuk, a harmadik (pi3) egy gyári, orvosi szenzorcsomag számítógépe. Ezek az eszközök egy switchen keresztül kommunikálnak egymással. Egy router is van a dobozban, ha kell az internetre is csatlakozhatunk mindegyik eszközünkkel, ez például a lokálisan tárolt adatok távoli szerverrel történő szinkronizációja miatt fontos. A dobozban jelenlévő szenzorok: hőmérséklet, páratartalom, hang, tűz érzékelő-ezek a szenzorok, ezek közelebb állnak az okosotthonhoz-, valamint az egészségügyi szenzorok: véroxigénszint-mérő (SPO2), ECG (pulzus, légzés), testhőmérséklet mérő. Utóbbiak leginkább érdekességük, különlegességük miatt kerültek a dobozba.
A hőmérséklet/páratartalom szenzor másodpercenként generál adatot (racionális számok). A hőmérsékletet Celsius-fokban mérjük, a páratartalom egy százalékos érték melyet relatív páratartalomnak nevezünk. Ezeket egy táblában gyűjtjük össze, melynek attribútumai a következők: szenzorID, hőmérséklet, páratartalom, időbélyeg (év-hónap-nap-óra:perc:másodperc).
A hangérzékelő egy bizonyos hangszín felett érzékel és generál adatot, egy algoritmus segítségével: az adott másodpercben érzékelt adatok szummázása adja a mennyiséget. Ezt az adatot tároljuk le egy táblában, aminek attribútumai: szenzorID, érték, időbélyeg.
A tűzérzékelőnél két esetről beszélhetünk: van tűz, vagy nincs. A szenzor csak abban az esetben küld adatot, ha tűz van. Ezen adatokat szintén egy külön táblában tároljuk, attribútumai: szenzorID, érték(boolean), időbélyeg. A szenzorok táblái a pi2 adatbázisában lokálisan kerültek deklarálásra.
A megjelenítésnek két módja van: hisztorikus adatokat a táblákból jelenítünk meg, illetve valós időben, amikor friss adatokat (utolsó 20) jelenítünk meg egy élő grafikonon. Akár az összes szenzor egy ábrán is látható, de igazán látványos és áttekinthető eredmény a szenzorok külön grafikonon ábrázolásával érhető el.
 A friss adatok megjelenítéséhez MQTT protokollt használunk, ekkor nem az adatbázisból olvassuk ki az adatokat, mert az nagyobb késleltetést eredményezne. Egy brókerre publikáljuk az adatokat és arra iratkozunk fel. Ennek a protokollnak köszönhető, hogy mire a következő adat mérésre kerül, az előzőt már megjelenítettük. Mindkét esetben webes megjelenítőt használunk.
 Az egészségügyi szenzorcsomaghoz egy dobozos szoftvert használunk. Ebben a szoftverben megjelenítjük a páciens állapotát, ám adatokat jelenleg nem tárolunk róla.
Célok:
Legfontosabb célunk egy android alkalmazás fejlesztése, ami a bemutatott szenzoradatok mobileszközön történő megjelenítését teszi lehetővé. Az applikációt java alapokon fejlesztjük, egészen 4.2 android verzióig nyújtunk támogatottságot. A webes megjelenítőhöz hasonlóan hisztorikus adatokat az adatbázisból rajzolunk ki, valamint valós idejű megjelenítéshez az MQTT brókerre feliratkozva kapunk adatokat. A dobozban lévő okosotthon szenzorokhoz készül az applikáció, tehát a páratartalom, hőmérséklet, tűzérzékelő, zajszint mérő lesznek benne.
Az app első megnyitásakor egy üdvözlő üzenet fogad minket, majd négy gomb a főablakban, a szenzoroknak megfelelő ikonnal. Attól függően melyik szenzor adataira vagyunk kíváncsiak, rábökünk a megfelelő gombra. Egy üres grafikon jelenik meg, aminek az x tengelye: idő, y tengelye: szenzoronként változó, lásd később. A megnyitás másodpercétől kezdve az MQTT-n keresztül érkező adatokat rajzolja fel az alkalmazás. Maximálisan 10 adatot rajzolunk ki, de ez eltérő lehet a telefon képernyőjének méretétől. Van lehetőség hisztorikus adatok lekéréséhez, ehhez a grafikon alatt találunk két bevitelimezőt ahol kiválaszthatunk két időbélyeget, melyek között vizsgálni szeretnénk az adatokat. Mint fentebb említettük, a szenzorok esetén eltérő Y tengelyeket definiálunk.
Hőmérséklet: -25 C°- +50 C°, Magyarország időjárásához igazítva
Páratartalom: 0-100 skála, hiszen relatív páratartalmat mér
Hang: 0-100 skála, hangerősség alapján
A tűzérzékelő eltér a többi szenzortól, itt egy égő tűz animációt láthatunk, ha tűz van, valamint értesítést küld az eseményről.
Az egészségügyi szenzor dobozos szoftverét szeretnénk elhagyni. Ezért saját fejlesztésű programot készítünk hozzá. Az adatokat egy python script segítségével nyerjük ki a szenzorokból. A script indításkor megkérdezi a páciens nevét és TAJ számát, amit a mért adatokhoz hozzárendel. Az adatokat MQTT protokollon publikáljuk és adattáblába is mentjük. Deklarálunk egy új táblát a pi2 adatbázisában. A tábla attribútumai: spo2, testhő, pulzus, légzés, időbélyeg, név, TAJ. Ebben a táblában tároljuk az adatokat, melyeket TAJ szám szerint bármikor lekérdezhetünk visszamenőleg. 
Prioritások:
Az applikáció elkészítése az okosotthon szenzorokkal. (SmartBox version 1)
Az egészségügyi szenzor saját programja. (HealthyPi GAIN version 1)
Határidők:
SmartBox version 1 – 2019.04.30.(kedd)
HealthyPi GAIN version 1 – 2019.05.30.(csütörtök)
